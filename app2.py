import streamlit as st
import pandas as pd
from io import BytesIO

# -------- PAGE CONFIG --------
st.set_page_config(page_title="Valeo - Traitement Donn√©es Finance", page_icon="üíº", layout="wide")

# -------- HEADER DESIGN --------
col_logo, col_title = st.columns([3, 9])
with col_logo:
    st.image("https://raw.githubusercontent.com/ELBITIachraf/nature-achat-app/main/Valeo_Logo.svg.png", width=100)

with col_title:
    st.markdown("""
        <div style='display: flex; flex-direction: column; justify-content: center; height: 100%; margin-top: 20px;'>
            <h1 style='font-size: 32px; margin-bottom: 10px;'>üìä Outil Finance - Traitement des Donn√©es</h1>
            <p style='font-size: 18px; color: grey; margin-top: 0;margin-left: 7%;'>D√©termination automatique de la nature d‚Äôachat & g√©n√©ration de cl√©</p>
        </div>
    """, unsafe_allow_html=True)

st.markdown("---")

# -------- FONCTIONS M√âTIERS --------
def determiner_nature_achat(row):
    val1 = str(row.get("Nature achat commandes ferm√©es", "") or "").strip()
    val2 = str(row.get("Nature d'achat unique ou sp√©cifique", "") or "").strip()
    val3 = str(row.get("Nature d'achat du compte", "") or "").strip()
    if val2.lower() not in ["", "vide", "nan"]:
        return val2
    elif val1.lower() not in ["", "vide", "nan"]:
        return val1
    else:
        return val3

def generer_cle(row):
    def safe(col_name):
        return str(row.get(col_name, "") or "").strip()
    nature_piece = safe("Nature pi√®ce").lower()
    tv = safe("TV")
    zone_geo = safe("Zone g√©ographique")
    nature_achat = safe("Nature d'achat finale")
    option_debit = safe("Option d√©bit")

    if nature_piece in ["paiement", "provision", "lettrage", "od"]:
        return f"{safe('Nature pi√®ce')}_{tv}"
    elif nature_piece == "ndf":
        return f"{safe('Nature pi√®ce')}_{zone_geo}_{tv}"
    else:
        return f"{zone_geo}_{safe('Nature pi√®ce')}_{nature_achat}_{tv}_{option_debit}"

# -------- UPLOAD & TRAITEMENT --------
st.subheader("üìÇ Importer un fichier Excel (.xlsx)")

uploaded_file = st.file_uploader("D√©posez ou s√©lectionnez un fichier", type=["xlsx"])

if uploaded_file:
    with st.spinner("üìä Chargement et analyse du fichier..."):
        try:
            df = pd.read_excel(uploaded_file)
            df.columns = df.columns.str.strip()
            st.success("‚úÖ Fichier charg√© avec succ√®s.")
            st.dataframe(df.head(30))

            col1, col2 = st.columns(2)

            with col1:
               if st.button("üß† D√©terminer la Nature d'achat finale"):
                 with st.spinner("‚è≥ D√©termination en cours..."):
                   
                   df["Nature d'achat finale"] = df.apply(determiner_nature_achat, axis=1)
                 st.success("‚úÖ Colonne 'Nature d'achat finale' ajout√©e.")

            with col2:
                if st.button("üîê G√©n√©rer la Cl√©"):
                    if "Nature d'achat finale" not in df.columns:
                        st.warning("‚ö†Ô∏è Veuillez d'abord calculer 'Nature d'achat finale'.")
                    else:
                        df["Cl√©"] = df.apply(generer_cle, axis=1)
                        st.success("‚úÖ Colonne 'Cl√©' g√©n√©r√©e avec succ√®s.")
                        st.dataframe(df[["Cl√©"]].head(5))

            st.markdown("---")
            st.subheader("üì• Exporter les r√©sultats")
            output = BytesIO()
            with pd.ExcelWriter(output, engine="openpyxl") as writer:
                df.to_excel(writer, index=False, sheet_name="R√©sultat")
            output.seek(0)

            st.download_button(
                label="üìÅ T√©l√©charger le fichier final (.xlsx)",
                data=output,
                file_name="Valeo_Traitement_Donnees.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

        except Exception as e:
            st.error(f"‚ùå Erreur : {e}")
